package com.example.exam2020_certificateapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;


import com.example.exam2020_certificateapp.model.User;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;


public class LoginActivity extends AppCompatActivity {
    private FirebaseAuth mAuth; // Connection to FirebaseAuthentication.
    private FirebaseFirestore mDb; // Connection to FirebaseFirestore database.
    private ProgressDialog dialog; // Access to ProgressDialog module.


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        mDb = FirebaseFirestore.getInstance();
        mAuth = FirebaseAuth.getInstance();

        final Button login = findViewById(R.id.loginBtn);
        login.setOnClickListener( new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                login();
            }
        });

        Button signUp = findViewById(R.id.loginSignupBtn);
        signUp.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                btnRouteRegisterActivity();
            }
        });
    }

    /**
     * Routes the user to the RegisterView when pressed.
     */
    public void btnRouteRegisterActivity() {
        startActivity(new Intent(this, RegisterActivity.class));
    }

    /**
     * Sends the entered E-mail and password to the FirebaseAuth function, if the TextEdits
     * are not null or empty.
     * If user is successfully authenticated, it calls the getUser().
     * If authentication is unsuccessful, the user gets prompted by an Error dialog.
     */
    public void login() {

        final EditText getEmail = findViewById(R.id.loginEtUsername);
        EditText getPassword = findViewById(R.id.loginEtPassword);

        final String email = getEmail.getText().toString();
        final String password = getPassword.getText().toString();
        progressBar();

        if((email != null && !email.isEmpty()) && password != null && !password.isEmpty()){

        mAuth.signInWithEmailAndPassword(email, password)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (task.isSuccessful()) {
                            // Sign in success, update UI with the signed-in user's information

                            FirebaseUser user = mAuth.getCurrentUser();
                            getUser(user.getUid());
                        } else {
                            // If sign in fails, display a message to the user.
                            getEmail.setTextColor(Color.RED);
                            Snackbar authError = Snackbar.make(findViewById(R.id.MainActivity),
                                    "Wrong email/username or password.",
                                    Snackbar.LENGTH_SHORT);
                            dialog.dismiss();
                            authError.show();
                        }

                    }
                    // ...
                });}
    }

    /**
     * Gets the User where the id (uid) matches to the user in the database.
     * If the user exists in the database, the redirectUser() is called, and passes the found user
     * as a parameter.
     * @param uid Represents the unique ID string generated by the database when a user is created.
     */
    private void getUser(String uid) {
        DocumentReference docRef = mDb.collection("users").document(uid);
        docRef.get()
                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                        if (task.isSuccessful()) {
                            DocumentSnapshot document = task.getResult();
                            if (document.exists()) {
                                User tempUser = document.toObject(User.class);
                                startCertificateListActivity(tempUser);
                            }
                        } else {

                        }
                    }
                });
        dialog.dismiss();
    }

    /**
     * Starts the certificateListActivity with the user as extra data for the intent.
     * @param user to retrieve the data from.
     */
    private void startCertificateListActivity(User user){
        Intent intent = new Intent(this, CertificateListActivity.class);
        intent.putExtra("user",user);
        startActivity(intent);
    }

    /**
     * Starts a progressDialog so the user gets an indication that data is being processed.
     */
    private void progressBar(){
        dialog = new ProgressDialog(LoginActivity.this);
        dialog.show();
        dialog.setContentView(R.layout.progress_dialog);
        dialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
    }
}